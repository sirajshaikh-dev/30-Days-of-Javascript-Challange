/*Array: Notes */
/*
// 1. Creating Arrays
// Literal Notation:

let fruits = ['Apple', 'Banana', 'Orange'];

// Constructor:
let fruits = new Array('Apple', 'Banana', 'Orange');

// 2. Accessing Elements
// -Use indices to access elements, with the first element being at index 0:

console.log(fruits[0]); // 'Apple'

// 3. Modifying Elements
// - You can modify elements by assigning a new value to an index:
 
fruits[1] = 'Grapes'; // ['Apple', 'Grapes', 'Orange']

// 4. Array Methods
// Adding Elements:
// push(): Adds elements to the end.
fruits.push('Mango'); // ['Apple', 'Grapes', 'Orange', 'Mango']

// unshift(): Adds elements to the beginning.
fruits.unshift('Pineapple'); // ['Pineapple', 'Apple', 'Grapes', 'Orange', 'Mango']

// Removing Elements:
// pop(): Removes the last element.
fruits.pop(); // ['Pineapple', 'Apple', 'Grapes', 'Orange']

// shift(): Removes the first element. 
fruits.shift(); // ['Apple', 'Grapes', 'Orange']

// Finding Elements:
// indexOf(): Returns the first index of a value.
let index = fruits.indexOf('Orange'); // 2

// includes(): Checks if an array contains a value.
let hasBanana = fruits.includes('Banana'); // false

// Iterating Over Arrays:
// for loop:
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}

// for...of loop:
 
for (let fruit of fruits) {
  console.log(fruit);
}

// forEach() method:
fruits.forEach(fruit => console.log(fruit));

// Array Methods for Transformation and Calculation:
// map(): Creates a new array with the results of calling a function for every array element.
 
let lengths = fruits.map(fruit => fruit.length);

// filter(): Creates a new array with all elements that pass a test.
let longFruits = fruits.filter(fruit => fruit.length > 5);

// reduce(): Applies a function against an accumulator and each element to reduce the array to a single value.
let totalLength = fruits.reduce((sum, fruit) => sum + fruit.length, 0);

*/